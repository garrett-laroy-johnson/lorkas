{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\deftab560
\pard\pardeftab560

\f0\fs24 \cf0 ( \
\cf2 SynthDef\cf0 (\cf3 "playBackRec_pitchChangeAudioIn"\cf0 , \{ \cf2 arg\cf0  out=1,bufnum=0, pan=1, bandwidth_ratio=0.001, amp=30, pitch_index=0, octave=0,inAmpBus;\
	\cf2 var\cf0  playbuf, xout, in_amp, len, piece_env, d_pitches, d_pitch_indices, delayLine;	\
	\
	d_pitch_indices = [10, 2, 7, 9, 2, 8, 2, 9, 7, 7, 2, 8, 8];\
\
	\cf4 //d_pitch_indices = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\cf0 \
	\
	d_pitches = \cf2 Array\cf0 .fill(d_pitch_indices[0], \{(62+(12*octave)).midicps\});\
	1.for(d_pitch_indices.size-1, \{ \cf2 |i|\cf0 d_pitches = d_pitches.addAll(\cf2 Array\cf0 .fill(d_pitch_indices[i], \{(62+i+(12*octave)).midicps\}))\}) ;\
\
	\cf4 //pitch_index = (d_pitches.size-1).rand;s\cf0 \
	\
	\cf4 //playbuf = PlayBuf.ar(1,bufnum);\cf0 \
\
	xout = 0; \
	in_amp = (\cf2 AudioIn\cf0 .ar(1) + \cf2 AudioIn\cf0 .ar(2)) * 10;\
		\
	xout = xout + \cf2 Resonz\cf0 .ar(in_amp, \cf2 Select\cf0 .kr(pitch_index, d_pitches)*1, bandwidth_ratio, 1); \
	xout = xout + \cf2 Resonz\cf0 .ar(in_amp, \cf2 Select\cf0 .kr(pitch_index, d_pitches)*2, bandwidth_ratio, 0.5); \
	xout = xout + \cf2 Resonz\cf0 .ar(in_amp, \cf2 Select\cf0 .kr(pitch_index, d_pitches)*3, bandwidth_ratio, 0.25); \
	xout = xout + \cf2 Resonz\cf0 .ar(in_amp, \cf2 Select\cf0 .kr(pitch_index, d_pitches)*4, bandwidth_ratio, 0.125); 		\
	xout = xout + \cf2 Resonz\cf0 .ar(in_amp, \cf2 Select\cf0 .kr(pitch_index, d_pitches)*5, bandwidth_ratio, 0.0625); 		\
	xout = xout + \cf2 Resonz\cf0 .ar(in_amp, \cf2 Select\cf0 .kr(pitch_index, d_pitches)*6, bandwidth_ratio, 0.125); 		\
	\cf4 //xout = xout + //Resonz.ar(in_amp, Select.kr(pitch_index, d_pitches)*7, bandwidth_ratio, 0.0625); 		\cf0 \
\
	\cf4 //FreeSelfWhenDone.kr(playbuf); // frees the synth when the PlayBuf is finished	\cf0 \
	xout = \cf2 Pan2\cf0 .ar(xout, xout, pan);	\
	\
	\cf2 Out\cf0 .ar(out, xout*amp);\
	\
\} ).store;\
\
\
\cf2 SynthDef\cf0 (\cf3 "Multiply_Shit"\cf0 ,\{ \cf2 arg\cf0  out=3,  bufnum=0, amp=30;\
	\cf2 var\cf0  env, xout, delayLine, in, playFile, file_names;\
	\cf2 var\cf0  in_amp, in_amp2, inAmp2, buf;\
	\
	in_amp = \cf2 AudioIn\cf0 .ar(1);\
	\
	playFile = \cf2 PlayBuf\cf0 .ar(2, bufnum, loop:1);			\
	xout = playFile*in_amp; \
	xout = \cf2 Convolution\cf0 .ar(playFile,xout, 1024, 0.5);\
	\
	\cf2 Out\cf0 .ar(out, xout*amp);\
\
\}).send(s);\
\
\
\cf2 SynthDef\cf0 (\cf3 "coif_delayLines"\cf0 , \{ \cf2 arg\cf0  out=2, linein=1, delay1amp=0, delay2amp=0, delay3amp=0, delaytime1=0.5, delaytime2=1, delaytime3=2; \
	\cf2 var\cf0  xout, delayLine, in_amp; \
	\
	xout = \cf2 In\cf0 .ar(linein);\
	in_amp = \cf2 Amplitude\cf0 .kr(xout); \
\
	delayLine = \cf2 DelayN\cf0 .ar(xout, 5, delaytime1, delay1amp, xout);	\
	delayLine = \cf2 DelayN\cf0 .ar(delayLine, 5, delaytime2+in_amp, delay2amp, delayLine);	\
	delayLine = \cf2 DelayN\cf0 .ar(delayLine, 5, delaytime3+in_amp, delay3amp, delayLine);	\
	\
	\cf2 Out\cf0 .ar(out, delayLine);\
\
\} ).store;\
\
\cf2 SynthDef\cf0 (\cf3 "coif_delayLinesNoAmpMess"\cf0 , \{ \cf2 arg\cf0  out=5, linein=1, delay1amp=0, delay2amp=0, delay3amp=0, delaytime1=0.5, delaytime2=1, delaytime3=2; \
	\cf2 var\cf0  xout, delayLine, in_amp; \
	\
	xout = \cf2 In\cf0 .ar(linein);\
	in_amp = \cf2 Amplitude\cf0 .kr(xout); \
\
	delayLine = \cf2 DelayN\cf0 .ar(xout, 5, delaytime1, delay1amp, xout);	\
	delayLine = \cf2 DelayN\cf0 .ar(delayLine, 5, delaytime2, delay2amp, delayLine);	\
	delayLine = \cf2 DelayN\cf0 .ar(delayLine, 5, delaytime3, delay3amp, delayLine);	\
	\
	\cf2 Out\cf0 .ar(out, delayLine);\
\
\} ).store;\
\
\cf2 SynthDef\cf0 (\cf5 \\accelWhiteNoiseSweep\cf0 , \{ \cf2 arg\cf0  out=4, in_accel=0, bufnum=0, bufnum2=0;\
	\cf2 var\cf0  xout, accel_data, accel_data2, accel_data3, playFile, playFile2, xout2;\
	\cf2 var\cf0  trig, scale;\
\
	playFile = \cf2 PlayBuf\cf0 .ar(2, bufnum, loop:1);				\
	playFile2 = \cf2 PlayBuf\cf0 .ar(2, bufnum2, loop:1);				\
	\
	accel_data = \cf2 In\cf0 .kr(0); \
	accel_data2 = \cf2 In\cf0 .kr(1);\
	accel_data3 = \cf2 In\cf0 .kr(2);\
\
	xout = \cf2 Resonz\cf0 .ar(\cf2 WhiteNoise\cf0 .ar(0.5), accel_data2*4000, 0.005+accel_data) + \cf2 LFDNoise3\cf0 .ar( 20000*(accel_data3+0.01), accel_data3); \
	\
	xout = \cf2 Pan2\cf0 .ar(xout, xout, 1 - (accel_data/2));	\
	\
	scale = 0.0002;\
	trig = ((\cf2 Slope\cf0 .kr(accel_data)*scale) > 0.01) + ((\cf2 Slope\cf0 .kr(accel_data2)*scale) > 0.1) + ((\cf2 Slope\cf0 .kr(accel_data3)*scale) > 0.1);\
	\
	playFile =  \cf2 Convolution\cf0 .ar(playFile,xout, 1024, 0.5, xout);\
	playFile2 = \cf2 Convolution\cf0 .ar(playFile2,xout, 1024, 0.5, xout);\
	\
	xout = (playFile*accel_data2) + (playFile2*(1-accel_data2));\
	\
	\cf2 Out\cf0 .ar(out,\
		\cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 .adsr(1, 1, 8, 1, 3, -4), trig, doneAction: 0) * xout);\
		 \
	\}).store;\
	\
\cf2 SynthDef\cf0 (\cf5 \\addVoice\cf0 , \{ \cf2 arg\cf0  out=5, linein=1; \
	\
	\cf2 var\cf0  xout;\
	\
	xout = \cf2 AudioIn\cf0 .ar(2);\
	xout = \cf2 Pan2\cf0 .ar(xout, 0);\
	xout = \cf2 Convolution\cf0 .ar(xout, \cf2 In\cf0 .ar(linein, 2), 1024, 0.5);\
	\cf2 Out\cf0 .ar(0, xout); \
	\
	\}).store;\
	\
\cf2 SynthDef\cf0 (\cf3 "cutting_mixer"\cf0 , \
	\{\
		\cf2 arg\cf0  amp1=1, amp2=1, amp3=1, amp4=1; \
		\
		\cf2 var\cf0  out1, out2, out3, out4; \
		out1 = \cf2 In\cf0 .ar(1, 2);\
		out2 = \cf2 In\cf0 .ar(2, 2);\
		out3 = \cf2 In\cf0 .ar(3, 2);\
		out4 = \cf2 In\cf0 .ar(4, 2);\
		\
		\cf2 Out\cf0 .ar(0, (out1*amp1) +(out2*amp2)+(out3*amp3)+(out4*amp4)); \
		\
	\}).store;\
)\
}