{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560

\f0\fs24 \cf0 \
\pard\pardeftab560
\cf2 // 1. Shift + enter to input all these lines & start the server\cf0 \
s = \cf3 Server\cf0 .local;\
s.options.inDevice = \cf4 "Built-in Input"\cf0  ;\
s.options.outDevice = \cf4 "Built-in Output"\cf0 ;\
s.options.sampleRate = 44100;\
s.options.memSize = 262144*2*2;\
s.notify;\
s.boot;\
\
\cf2 //2. Double-click right next to the paranthesis below to select all the synth definitions.  Then shift + enter to send to server.  Ok! Now scroll a shit-ton down\'85 whee!!!\cf0 \
( \
\cf3 SynthDef\cf0 (\cf4 "playBackRec_pitchChangeAudioIn"\cf0 , \{ \cf3 arg\cf0  out=1,bufnum=0, pan=1, bandwidth_ratio=0.001, amp=30, pitch_index=0, octave=0,inAmpBus;\
	\cf3 var\cf0  playbuf, xout, in_amp, len, piece_env, d_pitches, d_pitch_indices, delayLine;	\
	\
	d_pitch_indices = [10, 2, 7, 9, 2, 8, 2, 9, 7, 7, 2, 8, 8];\
\
	\cf2 //d_pitch_indices = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\cf0 \
	\
	d_pitches = \cf3 Array\cf0 .fill(d_pitch_indices[0], \{(62+(12*octave)).midicps\});\
	1.for(d_pitch_indices.size-1, \{ \cf3 |i|\cf0 d_pitches = d_pitches.addAll(\cf3 Array\cf0 .fill(d_pitch_indices[i], \{(62+i+(12*octave)).midicps\}))\}) ;\
\
	\cf2 //pitch_index = (d_pitches.size-1).rand;s\cf0 \
	\
	\cf2 //playbuf = PlayBuf.ar(1,bufnum);\cf0 \
\
	xout = 0; \
	in_amp = (\cf3 AudioIn\cf0 .ar(1) + \cf3 AudioIn\cf0 .ar(2)) * 10;\
		\
	xout = xout + \cf3 Resonz\cf0 .ar(in_amp, \cf3 Select\cf0 .kr(pitch_index, d_pitches)*1, bandwidth_ratio, 1); \
	xout = xout + \cf3 Resonz\cf0 .ar(in_amp, \cf3 Select\cf0 .kr(pitch_index, d_pitches)*2, bandwidth_ratio, 0.5); \
	xout = xout + \cf3 Resonz\cf0 .ar(in_amp, \cf3 Select\cf0 .kr(pitch_index, d_pitches)*3, bandwidth_ratio, 0.25); \
	xout = xout + \cf3 Resonz\cf0 .ar(in_amp, \cf3 Select\cf0 .kr(pitch_index, d_pitches)*4, bandwidth_ratio, 0.125); 		\
	xout = xout + \cf3 Resonz\cf0 .ar(in_amp, \cf3 Select\cf0 .kr(pitch_index, d_pitches)*5, bandwidth_ratio, 0.0625); 		\
	xout = xout + \cf3 Resonz\cf0 .ar(in_amp, \cf3 Select\cf0 .kr(pitch_index, d_pitches)*6, bandwidth_ratio, 0.125); 		\
	\cf2 //xout = xout + //Resonz.ar(in_amp, Select.kr(pitch_index, d_pitches)*7, bandwidth_ratio, 0.0625); 		\cf0 \
\
	\cf2 //FreeSelfWhenDone.kr(playbuf); // frees the synth when the PlayBuf is finished	\cf0 \
	xout = \cf3 Pan2\cf0 .ar(xout, xout, pan);	\
	\
	\cf3 Out\cf0 .ar(out, xout*amp);\
	\
\} ).store;\
\
\
\cf3 SynthDef\cf0 (\cf4 "Multiply_Shit"\cf0 ,\{ \cf3 arg\cf0  out=3,  bufnum=0, amp=30;\
	\cf3 var\cf0  env, xout, delayLine, in, playFile, file_names;\
	\cf3 var\cf0  in_amp, in_amp2, inAmp2, buf;\
	\
	in_amp = \cf3 AudioIn\cf0 .ar(1);\
	\
	playFile = \cf3 PlayBuf\cf0 .ar(2, bufnum, loop:1);			\
	xout = playFile*in_amp; \
	xout = \cf3 Convolution\cf0 .ar(playFile,xout, 1024, 0.5);\
	\
	\cf3 Out\cf0 .ar(out, xout*amp);\
\
\}).send(s);\
\
\
\cf3 SynthDef\cf0 (\cf4 "coif_delayLines"\cf0 , \{ \cf3 arg\cf0  out=2, linein=1, delay1amp=0, delay2amp=0, delay3amp=0, delaytime1=0.5, delaytime2=1, delaytime3=2; \
	\cf3 var\cf0  xout, delayLine, in_amp; \
	\
	xout = \cf3 In\cf0 .ar(linein);\
	in_amp = \cf3 Amplitude\cf0 .kr(xout); \
\
	delayLine = \cf3 DelayN\cf0 .ar(xout, 5, delaytime1, delay1amp, xout);	\
	delayLine = \cf3 DelayN\cf0 .ar(delayLine, 5, delaytime2+in_amp, delay2amp, delayLine);	\
	delayLine = \cf3 DelayN\cf0 .ar(delayLine, 5, delaytime3+in_amp, delay3amp, delayLine);	\
	\
	\cf3 Out\cf0 .ar(out, delayLine);\
\
\} ).store;\
\
\cf3 SynthDef\cf0 (\cf4 "coif_delayLinesNoAmpMess"\cf0 , \{ \cf3 arg\cf0  out=5, linein=1, delay1amp=0, delay2amp=0, delay3amp=0, delaytime1=0.5, delaytime2=1, delaytime3=2; \
	\cf3 var\cf0  xout, delayLine, in_amp; \
	\
	xout = \cf3 In\cf0 .ar(linein);\
	in_amp = \cf3 Amplitude\cf0 .kr(xout); \
\
	delayLine = \cf3 DelayN\cf0 .ar(xout, 5, delaytime1, delay1amp, xout);	\
	delayLine = \cf3 DelayN\cf0 .ar(delayLine, 5, delaytime2, delay2amp, delayLine);	\
	delayLine = \cf3 DelayN\cf0 .ar(delayLine, 5, delaytime3, delay3amp, delayLine);	\
	\
	\cf3 Out\cf0 .ar(out, delayLine);\
\
\} ).store;\
\
\cf3 SynthDef\cf0 (\cf5 \\accelWhiteNoiseSweep\cf0 , \{ \cf3 arg\cf0  out=4, in_accel=0, bufnum=0, bufnum2=0;\
	\cf3 var\cf0  xout, accel_data, accel_data2, accel_data3, playFile, playFile2, xout2;\
	\cf3 var\cf0  trig, scale;\
\
	playFile = \cf3 PlayBuf\cf0 .ar(2, bufnum, loop:1);				\
	playFile2 = \cf3 PlayBuf\cf0 .ar(2, bufnum2, loop:1);				\
	\
	accel_data = \cf3 In\cf0 .kr(0); \
	accel_data2 = \cf3 In\cf0 .kr(1);\
	accel_data3 = \cf3 In\cf0 .kr(2);\
\
	xout = \cf3 Resonz\cf0 .ar(\cf3 WhiteNoise\cf0 .ar(0.5), accel_data2*4000, 0.005+accel_data) + \cf3 LFDNoise3\cf0 .ar( 20000*(accel_data3+0.01), accel_data3); \
	\
	xout = \cf3 Pan2\cf0 .ar(xout, xout, 1 - (accel_data/2));	\
	\
	scale = 0.0002;\
	trig = ((\cf3 Slope\cf0 .kr(accel_data)*scale) > 0.01) + ((\cf3 Slope\cf0 .kr(accel_data2)*scale) > 0.1) + ((\cf3 Slope\cf0 .kr(accel_data3)*scale) > 0.1);\
	\
	playFile =  \cf3 Convolution\cf0 .ar(playFile,xout, 1024, 0.5, xout);\
	playFile2 = \cf3 Convolution\cf0 .ar(playFile2,xout, 1024, 0.5, xout);\
	\
	xout = (playFile*accel_data2) + (playFile2*(1-accel_data2));\
	\
	\cf3 Out\cf0 .ar(out,\
		\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .adsr(1, 1, 8, 1, 3, -4), trig, doneAction: 0) * xout);\
		 \
	\}).store;\
	\
\cf3 SynthDef\cf0 (\cf5 \\addVoice\cf0 , \{ \cf3 arg\cf0  out=5, linein=1; \
	\
	\cf3 var\cf0  xout;\
	\
	xout = \cf3 AudioIn\cf0 .ar(2);\
	xout = \cf3 Pan2\cf0 .ar(xout, 0);\
	xout = \cf3 Convolution\cf0 .ar(xout, \cf3 In\cf0 .ar(linein, 2), 1024, 0.5);\
	\cf3 Out\cf0 .ar(0, xout); \
	\
	\}).store;\
	\
\cf3 SynthDef\cf0 (\cf4 "cutting_mixer"\cf0 , \
	\{\
		\cf3 arg\cf0  amp1=1, amp2=1, amp3=1, amp4=1; \
		\
		\cf3 var\cf0  out1, out2, out3, out4; \
		out1 = \cf3 In\cf0 .ar(1, 2);\
		out2 = \cf3 In\cf0 .ar(2, 2);\
		out3 = \cf3 In\cf0 .ar(3, 2);\
		out4 = \cf3 In\cf0 .ar(4, 2);\
		\
		\cf3 Out\cf0 .ar(0, (out1*amp1) +(out2*amp2)+(out3*amp3)+(out4*amp4)); \
		\
	\}).store;\
)\
\
\cf2 //-----------------------------------------------------------------------------------------------------------------------------\cf0 \
\cf2 //-----------------------------------------------------------------------------------------------------------------------------\cf0 \
\
\
\cf2 //3. Double-click right next to the paranthesis below to select all my gui and interface shiz.  Then shift + enter to send to server. You're done!!!\cf0 \
\cf2 //open up the gui -- I hate writing guis as you can tell\'85 but mess around :D \cf0 \
(\
\cf3 var\cf0  pitches, ezbalancegain, octavebox, octavetext, mixer, delayLine, delayslider2, delayslider1, delayslider3, delaytimesliders1,delaytimesliders2, delaytimesliders3, file_names, buf, strConv, strConvTurnOffBut, tromboneFilenames, tromboneConv, tromConvBut, pitchChangeButStr, pitchChangeButTrom, accelBuf, accelBuf2,\
mixer_slider1, mixer_slider2, mixer_slider3, mixer_slider4, strDelayLine, tromboneDelayLine; \
\
mixer = \cf3 Synth\cf0 .new(\cf4 "cutting_mixer"\cf0 ); \
\
delayLine = \cf3 Synth\cf0 .new(\cf4 "coif_delayLines"\cf0 );\
\
file_names = [\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softA1.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softC3.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softE4.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softA2.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softC4.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softF1.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softA3.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softC5.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softF2.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softA4.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softD1.wav"\cf0 ,       \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softF3.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softB1.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softD2.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softF4.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softB2.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softD3.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softG1.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softB3.wav"\cf0 ,       \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softD4.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softG2.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softB4.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softE1.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softG3.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softC1.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softE2.wav"\cf0 ,        \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softG4.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softC2.wav"\cf0 ,       \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Strings/Cello Soft/Cello softE3.wav"\cf0 ];\
	\
tromboneFilenames = [\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft A2.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft C3.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft D4.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft F2.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft G3.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft A3.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft C4.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft E2.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft F3.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft G4.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft B2.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft D2.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft E3.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft F4.wav"\cf0 ,\
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft B3.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft D3.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft E4.wav"\cf0 ,  \
	\cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Brass/Trombone/Standard/Soft Layer/TB Soft G2.wav"\cf0 ];\
	\
	\
\
accelBuf = \cf3 Buffer\cf0 .read(s, \cf4 "/Users/student/Desktop/Lorkas/sharp_debris.br.low.aif"\cf0 );\
accelBuf2 = \cf3 Buffer\cf0 .read(s, \cf4 "/Users/student/Desktop/Lorkas/Strings & Things/Ethnic/Temple Gong/Temple Gong 3.wav"\cf0 );			\
t = \cf3 Synth\cf0 .new(\cf5 \\accelWhiteNoiseSweep\cf0 , [\cf5 \\bufnum\cf0 , accelBuf, \cf5 \\bufnum2\cf0 , accelBuf2]);\
\
	\
		\
		\
strConv = \cf3 Array\cf0 .fill(4, \{ \
	\cf3 |i|\cf0 \
		\cf3 var\cf0  buf; \
		buf = \cf3 Buffer\cf0 .read(s, file_names[rand(file_names.size)]);  			\
		\cf3 Synth\cf0 .new(\cf4 "Multiply_Shit"\cf0 ,[\cf5 \\bufnum\cf0 , buf.bufnum] );\
	\}); \
\
\
tromboneConv = \cf3 Array\cf0 .fill(5, \{ \
	\cf3 |i|\cf0 \
		\cf3 var\cf0  buf; \
		buf = \cf3 Buffer\cf0 .read(s, tromboneFilenames[rand(tromboneFilenames.size)]);  			\
		\cf3 Synth\cf0 .new(\cf4 "Multiply_Shit"\cf0 ,[\cf5 \\bufnum\cf0 , buf.bufnum] );\
	\}); \
	\
\
	pitches = \cf3 Array\cf0 .fill(8, \{ \cf3 |i|\cf0  \cf3 Synth\cf0 .new(\cf4 "playBackRec_pitchChangeAudioIn"\cf0 , [\cf5 \\out\cf0 , 1, \cf5 \\bufnum\cf0 , 0, \cf5 \\pan\cf0 , 	\
	(2.0.rand-1), \cf5 \\bandwidth_ratio\cf0 , 0.001, \cf5 \\inAmpBus\cf0 , 0, \cf5 \\pitch_index\cf0 , 70.rand]); \});\
\
	strDelayLine = \cf3 Synth\cf0 .new(\cf4 "coif_delayLinesNoAmpMess"\cf0 , [\cf5 \\out\cf0 , 6, \cf5 \\linein\cf0 , 1]); \
	tromboneDelayLine = \cf3 Synth\cf0 .new(\cf4 "coif_delayLinesNoAmpMess"\cf0 , [\cf5 \\out\cf0 , 7, \cf5 \\linein\cf0 , 1]); \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf0 	w = \cf3 SCWindow\cf0 (\cf4 "Control Resonz Filters Chord"\cf0 , \cf3 Rect\cf0 (20, 600, 1500, 350));\
\pard\pardeftab560
\cf0 	w.front;\
	w.view.decorator = \cf3 FlowLayout\cf0 (w.view.bounds); \
	w.onClose_(\{ \
		0.for(pitches.size-1, \{\cf3 |i|\cf0  pitches[i].free;\}) ;\
		0.for(strConv.size-1, \{\cf3 |i|\cf0  strConv[i].free;\}); \
		0.for(tromboneConv.size-1, \{\cf3 |i|\cf0  tromboneConv[i].free;\}); \
		\});\
		\
	ezbalancegain = \cf3 Array\cf0 .new;\
	octavebox = \cf3 Array\cf0 .new;\
	octavetext = \cf3 Array\cf0 .new;\
	 \
	0.for(pitches.size-1, \{ \
		\cf3 |i|\cf0 \
		\cf3 var\cf0  slider, slider2, o_box, o_but, obut2, obut3, obut4, obut5;\
	 	slider =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					300 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "amp"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0.00000001, 15), \cf2 // control spec\cf0 \
					\{ \
						pitches[i].set(\cf5 \\amp\cf0 , slider.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);	\
				ezbalancegain.add(slider); \
						\
		o_but = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,90,20))\
			.states_([\
				[\cf4 "random pitch"\cf0 ],\
				[\cf4 "random again"\cf0 ],\
				\
			])\
			.action_(\{ \
				pitches[i].set(\cf5 \\pitch_index\cf0 , 70.rand);\
			\});\
			\
		obut2 = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,50,20))\
			.states_([\
				[\cf4 "up 1"\cf0 ],\
				[\cf4 "up 1"\cf0 ],\
				\
			])\
			.action_(\{ \
				pitches[i].get(\cf5 \\pitch_index\cf0 , \{ \cf3 arg\cf0  value;  pitches[i].set(\cf5 \\pitch_index\cf0 , value+1 ) \}); \
			\});\
			\
		obut3 = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,50,20))\
			.states_([\
				[\cf4 "down 1"\cf0 ],\
				[\cf4 "down 1"\cf0 ],\
				\
			])\
			.action_(\{ \
				pitches[i].get(\cf5 \\pitch_index\cf0 , \{ \cf3 arg\cf0  value;  pitches[i].set(\cf5 \\pitch_index\cf0 , value-1 ) \}); \
			\});\
		\
		obut4 = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,50,20))\
			.states_([\
				[\cf4 "up 8"\cf0 ],\
				[\cf4 "up 8"\cf0 ],\
				\
			])\
			.action_(\{ \
				pitches[i].get(\cf5 \\octave\cf0 , \{ \cf3 arg\cf0  value;  pitches[i].set(\cf5 \\octave\cf0 , value+1 ) \}); \
			\});\
		\
		obut5 = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,50,20))\
			.states_([\
				[\cf4 "dwn 8"\cf0 ],\
				[\cf4 "dwn 8"\cf0 ],\
				\
			])\
			.action_(\{ \
				pitches[i].get(\cf5 \\octave\cf0 , \{ \cf3 arg\cf0  value;  pitches[i].set(\cf5 \\octave\cf0 , value-1 ) \}); \
			\});\
			\
	 	slider2 =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "filter q"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0.001, 0.2), \cf2 // control spec\cf0 \
					\{ \
						pitches[i].set(\cf5 \\bandwidth_ratio\cf0 , slider2.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);	\
				ezbalancegain.add(slider2); \
				\
\
	\
				\
		octavetext.add(o_but);\
		octavetext.add(obut2);\
		octavetext.add(obut3);	\
		octavetext.add(obut4);\
		octavetext.add(obut5);\
		\
				\
		pitches[i].set(\cf5 \\amp\cf0 , 0);	\
		w.view.decorator.nextLine;\
	\
	\});\
	\
	w.view.decorator.nextLine;\
	w.view.decorator.nextLine;\
\
				delayslider1  =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "Delay 1"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0, 2), \cf2 // control spec\cf0 \
					\{ \
						delayLine.set(\cf5 \\delay1amp\cf0 , delayslider1.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);\
				\
				delaytimesliders1 = \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "Delay Time"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0.001, 3), \cf2 // control spec\cf0 \
					\{ \
						delayLine.set(\cf5 \\delaytime1\cf0 , delaytimesliders1.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);\
\
				\
				w.view.decorator.nextLine;\
	\
				\
				delayslider2  =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "Delay 2"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0, 2), \cf2 // control spec\cf0 \
					\{ \
						delayLine.set(\cf5 \\delay2amp\cf0 , delayslider2.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);	 \
				\
				delaytimesliders2 = \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "Delay Time"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0.001, 3), \cf2 // control spec\cf0 \
					\{ \
						delayLine.set(\cf5 \\delaytime2\cf0 , delaytimesliders2.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);\
				\
				w.view.decorator.nextLine;\
\
				delayslider3  =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "Delay 3"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0, 2), \cf2 // control spec\cf0 \
					\{ \
						delayLine.set(\cf5 \\delay3amp\cf0 , delayslider3.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);	 \
				\
	\
				delaytimesliders3 = \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
					500 @ 20, \cf2 // dimensions\cf0 \
					\cf4 "Delay Time"\cf0 , \cf2 // label\cf0 \
					\cf3 ControlSpec\cf0 (0.001, 3), \cf2 // control spec\cf0 \
					\{ \
						delayLine.set(\cf5 \\delaytime3\cf0 , delaytimesliders3.value);\
					\},\cf2 // action\cf0 \
					0 // initVal\
				);\
				w.view.decorator.nextLine;\
				w.view.decorator.nextLine;\
				\
				strConvTurnOffBut=  \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,100,20))\
					.states_([\
						[\cf4 "Turn Conv. ALL Str. Off"\cf0 ],\
						[\cf4 "Turn Conv. ALL Str. Off"\cf0 ],\
				\
					])\
				.action_(\{ \
					0.for( strConv.size-1 ,\{ \cf3 |i|\cf0  strConv[i].set(\cf5 \\amp\cf0 , 0) \} ); \
				\});\
\
				w.view.decorator.nextLine;\
				0.for(strConv.size-1, \{  \
					\cf3 |i|\cf0 \
					\cf3 var\cf0  slider, but;\
	 				slider =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
						300 @ 20, \cf2 // dimensions\cf0 \
						\cf4 "amp"\cf0 , \cf2 // label\cf0 \
						\cf3 ControlSpec\cf0 (0.00000001, 15), \cf2 // control spec\cf0 \
						\{ \
							strConv[i].set(\cf5 \\amp\cf0 , slider.value);\
						\},\cf2 // action\cf0 \
						0 // initVal\
					);	\
					strConv[i].set(\cf5 \\amp\cf0 , 0);\
					ezbalancegain.add(slider); \
					\
						but = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,75,20))\
						.states_([\
							[\cf4 "change"\cf0 ],\
							[\cf4 "change"\cf0 ],\
				\
						])\
					.action_(\{ \
						\cf3 var\cf0  buf; \
								\cf3 var\cf0  buf2; \
								buf2 = \cf3 Buffer\cf0 .read(s, file_names[rand(file_names.size)]);  	\
								strConv[i].get(\cf5 \\bufnum\cf0 , \{ \cf3 arg\cf0  value; strConv[i].set(\cf5 \\bufnum\cf0 , buf2.bufnum ) \}); \
					\});\
\
				       w.view.decorator.nextLine;\
				\});\
\
				w.view.decorator.nextLine;\
				w.view.decorator.nextLine;\
				\
				tromConvBut = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,100,20))\
					.states_([\
						[\cf4 "Turn Conv. ALL Trombone Off"\cf0 ],\
						[\cf4 "Turn Conv. ALL Trombone Off"\cf0 ],\
				\
					])\
				.action_(\{ \
					0.for( tromboneConv.size-1 ,\{ \cf3 |i|\cf0  strConv[i].set(\cf5 \\amp\cf0 , 0) \} ); \
				\});\
				\
				w.view.decorator.nextLine;\
\
\
				0.for(tromboneConv.size-1, \{  \
					\cf3 |i|\cf0 \
					\cf3 var\cf0  slider, but;\
	 				slider =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
						300 @ 20, \cf2 // dimensions\cf0 \
						\cf4 "amp"\cf0 , \cf2 // label\cf0 \
						\cf3 ControlSpec\cf0 (0.00000001, 15), \cf2 // control spec\cf0 \
						\{ \
							tromboneConv[i].set(\cf5 \\amp\cf0 , slider.value);\
						\},\cf2 // action\cf0 \
						0 // initVal\
					);	\
					tromboneConv[i].set(\cf5 \\amp\cf0 , 0);\
					ezbalancegain.add(slider); \
					\
					but = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (20,20,75,20))\
						.states_([\
							[\cf4 "change"\cf0 ],\
							[\cf4 "change"\cf0 ],\
				\
						])\
					.action_(\{ \
						\cf3 var\cf0  buf; \
								\cf3 var\cf0  buf1; \
								buf1 = \cf3 Buffer\cf0 .read(s, tromboneFilenames[rand(tromboneFilenames.size)]);  	\
								tromboneConv[i].get(\cf5 \\bufnum\cf0 , \{ \cf3 arg\cf0  value; tromboneConv[i].set(\cf5 \\bufnum\cf0 , buf1.bufnum ) \}); \
					\});\
			\
				       w.view.decorator.nextLine;\
				\});\
\
\
				       w.view.decorator.nextLine;\
				       w.view.decorator.nextLine;\
				       w.view.decorator.nextLine;\
				       w.view.decorator.nextLine;\
				       w.view.decorator.nextLine;\
				       w.view.decorator.nextLine;\
				       w.view.decorator.nextLine;\
				       \
				    \
				    \
			 		mixer_slider1 =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
						1000 @ 20, \cf2 // dimensions\cf0 \
						\cf4 "reson filters"\cf0 , \cf2 // label\cf0 \
						\cf3 ControlSpec\cf0 (0.00000001, 5), \cf2 // control spec\cf0 \
						\{ \
							mixer.set(\cf5 \\amp1\cf0 , mixer_slider1.value);\
						\},\cf2 // action\cf0 \
						1 // initVal\
					);	\
		       		mixer.set(\cf5 \\amp1\cf0 , 1);\
		       		w.view.decorator.nextLine;\
\
					\
			 		mixer_slider2 =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
						1000 @ 20, \cf2 // dimensions\cf0 \
						\cf4 "strings"\cf0 , \cf2 // label\cf0 \
						\cf3 ControlSpec\cf0 (0.00000001, 5), \cf2 // control spec\cf0 \
						\{ \
							mixer.set(\cf5 \\amp2\cf0 , mixer_slider2.value);\
						\},\cf2 // action\cf0 \
						1 // initVal\
					);	\
					mixer.set(\cf5 \\amp2\cf0 , 1);\
	\
				       w.view.decorator.nextLine;\
				       \
\
			 		mixer_slider3 =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
						1000 @ 20, \cf2 // dimensions\cf0 \
						\cf4 "trombones"\cf0 , \cf2 // label\cf0 \
						\cf3 ControlSpec\cf0 (0.00000001, 5), \cf2 // control spec\cf0 \
						\{ \
							mixer.set(\cf5 \\amp3\cf0 , mixer_slider3.value);\
						\},\cf2 // action\cf0 \
						1 // initVal\
					);	\
					mixer.set(\cf5 \\amp3\cf0 , 1);					\
				       w.view.decorator.nextLine;\
				       \
				       \
\
			 		mixer_slider4 =  \cf3 EZSlider\cf0 (w, \cf2 // window\cf0 \
						1000 @ 20, \cf2 // dimensions\cf0 \
						\cf4 "accelerometer"\cf0 , \cf2 // label\cf0 \
						\cf3 ControlSpec\cf0 (0.00000001, 5), \cf2 // control spec\cf0 \
						\{ \
							mixer.set(\cf5 \\amp4\cf0 , mixer_slider4.value);\
						\},\cf2 // action\cf0 \
						1 // initVal\
					);	\
					mixer.set(\cf5 \\amp4\cf0 , 1);					\
				       w.view.decorator.nextLine;\
	\
)\
\
\pard\pardeftab560
\cf2 //add for voice effect\cf0 \
b = \cf3 Synth\cf0 .new(\cf5 \\addVoice\cf0 );}